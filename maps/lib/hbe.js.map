{"version":3,"file":"../../lib/hbe.js","names":["cryptoObj","window","crypto","msCrypto","storage","localStorage","storageName","location","pathname","keySalt","textToArray","ivSalt","knownPrefix","mainElement","document","getElementById","wrongPassMessage","dataset","wrongHashMessage","dataElement","getElementsByTagName","encryptedData","innerText","HmacDigist","hexToArray","s","Uint8Array","match","map","h","parseInt","i","length","n","ba","Array","j","c","codePointAt","arrayBufferToHex","arrayBuffer","byteLength","TypeError","value","view","result","toString","async","convertHTMLToElement","content","out","createElement","innerHTML","querySelectorAll","forEach","elem","replaceWith","oldElem","att","getExecutableScript","decrypt","decryptKey","iv","hmacKey","typedArray","subtle","name","buffer","then","decoded","TextDecoder","decode","startsWith","hideButton","textContent","type","classList","add","addEventListener","removeItem","reload","style","display","appendChild","getAttribute","src","NexT","boot","refresh","tocDiv","tocDivs","getElementsByClassName","idx","event","Event","dispatchEvent","key","encoded","TextEncoder","encode","signature","verify","hash","console","log","alert","verifyContent","catch","e","oldStorageData","JSON","parse","getItem","sIv","sDk","dk","sHmk","hmk","importKey","dkCK","hmkCK","isComposing","keyCode","password","keyMaterial","encoder","getKeyMaterial","deriveKey","salt","iterations","getHmacKey","getDecryptKey","deriveBits","getIv","exportKey","newStorageData","setItem","stringify","hbeLoader"],"sources":["lib/hbe.js"],"mappings":"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","sourcesContent":["(() => {\n  'use strict';\n\n  const cryptoObj = window.crypto || window.msCrypto;\n  const storage = window.localStorage;\n\n  const storageName = 'hexo-blog-encrypt:#' + window.location.pathname;\n  const keySalt = textToArray('hexo-blog-encrypt的作者们都是大帅比!');\n  const ivSalt = textToArray('hexo-blog-encrypt是地表最强Hexo加密插件!');\n\n// As we can't detect the wrong password with AES-CBC,\n// so adding an empty div and check it when decrption.\nconst knownPrefix = \"<hbe-prefix></hbe-prefix>\";\n\n  const mainElement = document.getElementById('hexo-blog-encrypt');\n  const wrongPassMessage = mainElement.dataset['wpm'];\n  const wrongHashMessage = mainElement.dataset['whm'];\n  const dataElement = mainElement.getElementsByTagName('script')['hbeData'];\n  const encryptedData = dataElement.innerText;\n  const HmacDigist = dataElement.dataset['hmacdigest'];\n\n  function hexToArray(s) {\n    return new Uint8Array(s.match(/[\\da-f]{2}/gi).map((h => {\n      return parseInt(h, 16);\n    })));\n  }\n\n  function textToArray(s) {\n    var i = s.length;\n    var n = 0;\n    var ba = new Array()\n\n    for (var j = 0; j < i;) {\n      var c = s.codePointAt(j);\n      if (c < 128) {\n        ba[n++] = c;\n        j++;\n      } else if ((c > 127) && (c < 2048)) {\n        ba[n++] = (c >> 6) | 192;\n        ba[n++] = (c & 63) | 128;\n        j++;\n      } else if ((c > 2047) && (c < 65536)) {\n        ba[n++] = (c >> 12) | 224;\n        ba[n++] = ((c >> 6) & 63) | 128;\n        ba[n++] = (c & 63) | 128;\n        j++;\n      } else {\n        ba[n++] = (c >> 18) | 240;\n        ba[n++] = ((c >> 12) & 63) | 128;\n        ba[n++] = ((c >> 6) & 63) | 128;\n        ba[n++] = (c & 63) | 128;\n        j += 2;\n      }\n    }\n    return new Uint8Array(ba);\n  }\n\n  function arrayBufferToHex(arrayBuffer) {\n    if (typeof arrayBuffer !== 'object' || arrayBuffer === null || typeof arrayBuffer.byteLength !== 'number') {\n      throw new TypeError('Expected input to be an ArrayBuffer')\n    }\n\n    var view = new Uint8Array(arrayBuffer)\n    var result = ''\n    var value\n\n    for (var i = 0; i < view.length; i++) {\n      value = view[i].toString(16)\n      result += (value.length === 1 ? '0' + value : value)\n    }\n\n    return result\n  }\n\n  async function getExecutableScript(oldElem) {\n    let out = document.createElement('script');\n    const attList = ['type', 'text', 'src', 'crossorigin', 'defer', 'referrerpolicy'];\n    attList.forEach((att) => {\n      if (oldElem[att])\n        out[att] = oldElem[att];\n    })\n\n    return out;\n  }\n\n  async function convertHTMLToElement(content) {\n    let out = document.createElement('div');\n    out.innerHTML = content;\n    out.querySelectorAll('script').forEach(async (elem) => {\n      elem.replaceWith(await getExecutableScript(elem));\n    });\n\n    return out;\n  }\n\n  function getKeyMaterial(password) {\n    let encoder = new TextEncoder();\n    return cryptoObj.subtle.importKey(\n      'raw',\n      encoder.encode(password),\n      {\n        'name': 'PBKDF2',\n      },\n      false,\n      [\n        'deriveKey',\n        'deriveBits',\n      ]\n    );\n  }\n\n  function getHmacKey(keyMaterial) {\n    return cryptoObj.subtle.deriveKey({\n      'name': 'PBKDF2',\n      'hash': 'SHA-256',\n      'salt': keySalt.buffer,\n      'iterations': 1024\n    }, keyMaterial, {\n      'name': 'HMAC',\n      'hash': 'SHA-256',\n      'length': 256,\n    }, true, [\n      'verify',\n    ]);\n  }\n\n  function getDecryptKey(keyMaterial) {\n    return cryptoObj.subtle.deriveKey({\n      'name': 'PBKDF2',\n      'hash': 'SHA-256',\n      'salt': keySalt.buffer,\n      'iterations': 1024,\n    }, keyMaterial, {\n      'name': 'AES-CBC',\n      'length': 256,\n    }, true, [\n      'decrypt',\n    ]);\n  }\n\n  function getIv(keyMaterial) {\n    return cryptoObj.subtle.deriveBits({\n      'name': 'PBKDF2',\n      'hash': 'SHA-256',\n      'salt': ivSalt.buffer,\n      'iterations': 512,\n    }, keyMaterial, 16 * 8);\n  }\n\n  async function verifyContent(key, content) {\n    const encoder = new TextEncoder();\n    const encoded = encoder.encode(content);\n\n    let signature = hexToArray(HmacDigist);\n\n    const result = await cryptoObj.subtle.verify({\n      'name': 'HMAC',\n      'hash': 'SHA-256',\n    }, key, signature, encoded);\n    console.log(`Verification result: ${result}`);\n    if (!result) {\n      alert(wrongHashMessage);\n      console.log(`${wrongHashMessage}, got `, signature, ` but proved wrong.`);\n    }\n    return result;\n  }\n\n  async function decrypt(decryptKey, iv, hmacKey) {\n    let typedArray = hexToArray(encryptedData);\n\n    const result = await cryptoObj.subtle.decrypt({\n      'name': 'AES-CBC',\n      'iv': iv,\n    }, decryptKey, typedArray.buffer).then(async (result) => {\n      const decoder = new TextDecoder();\n      const decoded = decoder.decode(result);\n\n      // check the prefix, if not then we can sure here is wrong password.\n      if (!decoded.startsWith(knownPrefix)) {\n        throw \"Decode successfully but not start with KnownPrefix.\";\n      }\n\n      const hideButton = document.createElement('button');\n      hideButton.textContent = 'Encrypt again';\n      hideButton.type = 'button';\n      hideButton.classList.add(\"hbe-button\");\n      hideButton.addEventListener('click', () => {\n        window.localStorage.removeItem(storageName);\n        window.location.reload();\n      });\n\n      document.getElementById('hexo-blog-encrypt').style.display = 'inline';\n      document.getElementById('hexo-blog-encrypt').innerHTML = '';\n      document.getElementById('hexo-blog-encrypt').appendChild(await convertHTMLToElement(decoded));\n      document.getElementById('hexo-blog-encrypt').appendChild(hideButton);\n\n      // support html5 lazyload functionality.\n      document.querySelectorAll('img').forEach((elem) => {\n        if (elem.getAttribute(\"data-src\") && !elem.src) {\n          elem.src = elem.getAttribute('data-src');\n        }\n      });\n\n      // support theme-next refresh\n      window.NexT && NexT.boot && typeof NexT.boot.refresh === 'function' && NexT.boot.refresh();\n\n      // TOC part\n      var tocDiv = document.getElementById(\"toc-div\");\n      if (tocDiv) {\n        tocDiv.style.display = 'inline';\n      }\n\n      var tocDivs = document.getElementsByClassName('toc-div-class');\n      if (tocDivs && tocDivs.length > 0) {\n        for (var idx = 0; idx < tocDivs.length; idx++) {\n          tocDivs[idx].style.display = 'inline';\n        }\n      }\n      \n      // trigger event\n      var event = new Event('hexo-blog-decrypt');\n      window.dispatchEvent(event);\n\n      return await verifyContent(hmacKey, decoded);\n    }).catch((e) => {\n      alert(wrongPassMessage);\n      console.log(e);\n      return false;\n    });\n\n    return result;\n\n  }\n\n  function hbeLoader() {\n\n    const oldStorageData = JSON.parse(storage.getItem(storageName));\n\n    if (oldStorageData) {\n      console.log(`Password got from localStorage(${storageName}): `, oldStorageData);\n\n      const sIv = hexToArray(oldStorageData.iv).buffer;\n      const sDk = oldStorageData.dk;\n      const sHmk = oldStorageData.hmk;\n\n      cryptoObj.subtle.importKey('jwk', sDk, {\n        'name': 'AES-CBC',\n        'length': 256,\n      }, true, [\n        'decrypt',\n      ]).then((dkCK) => {\n        cryptoObj.subtle.importKey('jwk', sHmk, {\n          'name': 'HMAC',\n          'hash': 'SHA-256',\n          'length': 256,\n        }, true, [\n          'verify',\n        ]).then((hmkCK) => {\n          decrypt(dkCK, sIv, hmkCK).then((result) => {\n            if (!result) {\n              storage.removeItem(storageName);\n            }\n          });\n        });\n      });\n    }\n\n    mainElement.addEventListener('keydown', async (event) => {\n      if (event.isComposing || event.keyCode === 13) {\n        const password = document.getElementById('hbePass').value;\n        const keyMaterial = await getKeyMaterial(password);\n        const hmacKey = await getHmacKey(keyMaterial);\n        const decryptKey = await getDecryptKey(keyMaterial);\n        const iv = await getIv(keyMaterial);\n\n        decrypt(decryptKey, iv, hmacKey).then((result) => {\n          console.log(`Decrypt result: ${result}`);\n          if (result) {\n            cryptoObj.subtle.exportKey('jwk', decryptKey).then((dk) => {\n              cryptoObj.subtle.exportKey('jwk', hmacKey).then((hmk) => {\n                const newStorageData = {\n                  'dk': dk,\n                  'iv': arrayBufferToHex(iv),\n                  'hmk': hmk,\n                };\n                storage.setItem(storageName, JSON.stringify(newStorageData));\n              });\n            });\n          }\n        });\n      }\n    });\n  }\n\n  hbeLoader();\n\n})();\n"]}